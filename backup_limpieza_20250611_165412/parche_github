#!/usr/bin/env python3
"""
Parche para arreglar la integraci√≥n con GitHub Pages
Ejecutar despu√©s de cada an√°lisis para asegurar que se suban los reportes
"""

import os
import sys
from datetime import datetime

def verificar_archivos_para_subir():
    """
    Verifica qu√© archivos HTML est√°n listos para subir
    """
    archivos_html = []
    
    # Buscar en reports/
    if os.path.exists("reports"):
        for archivo in os.listdir("reports"):
            if archivo.endswith(".html"):
                path_completo = os.path.join("reports", archivo)
                archivos_html.append(path_completo)
    
    # Ordenar por fecha de modificaci√≥n (m√°s reciente primero)
    archivos_html.sort(key=lambda x: os.path.getmtime(x), reverse=True)
    
    return archivos_html

def subir_a_github_pages(html_path):
    """
    Sube un archivo espec√≠fico a GitHub Pages
    """
    try:
        from github_pages_uploader import GitHubPagesUploader
        
        uploader = GitHubPagesUploader()
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M')
        
        # Determinar t√≠tulo basado en el nombre del archivo
        nombre_archivo = os.path.basename(html_path)
        if "opportunities" in nombre_archivo.lower():
            titulo = f"üìä Reporte de Oportunidades - {timestamp}"
            descripcion = f"An√°lisis de oportunidades de insider trading generado el {timestamp}"
        elif "complete" in nombre_archivo.lower() or "bundle" in nombre_archivo.lower():
            titulo = f"üìà Reporte Completo con Gr√°ficos - {timestamp}"
            descripcion = f"Reporte completo con gr√°ficos y an√°lisis detallado generado el {timestamp}"
        else:
            titulo = f"üìä Reporte Insider Trading - {timestamp}"
            descripcion = f"Reporte de an√°lisis de insider trading generado el {timestamp}"
        
        print(f"üåê Subiendo a GitHub Pages: {html_path}")
        result = uploader.upload_report(html_path, titulo, descripcion)
        
        if result:
            print(f"‚úÖ Subido exitosamente!")
            print(f"üåê URL: {result['file_url']}")
            print(f"üè† Sitio: {result['index_url']}")
            return result
        else:
            print("‚ùå Error subiendo archivo")
            return None
            
    except ImportError:
        print("‚ùå github_pages_uploader no encontrado")
        return None
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return None

def enviar_notificacion_telegram_corregida(archivos_subidos):
    """
    Env√≠a notificaci√≥n por Telegram con los enlaces correctos
    """
    try:
        from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID
        from alerts.telegram_utils import send_message
        
        if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
            print("‚ö†Ô∏è Telegram no configurado")
            return False
        
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M')
        
        if archivos_subidos:
            mensaje = f"""üåê REPORTES SUBIDOS A GITHUB PAGES

üìÖ Fecha: {timestamp}
üìä Archivos subidos: {len(archivos_subidos)}

üîó ENLACES DIRECTOS:"""
            
            for i, resultado in enumerate(archivos_subidos, 1):
                if resultado:
                    nombre = os.path.basename(resultado.get('filename', 'reporte'))
                    url = resultado.get('file_url', '')
                    mensaje += f"\n{i}. üìÑ {nombre}: {url}"
            
            # Agregar enlace al sitio principal
            if archivos_subidos and archivos_subidos[0]:
                index_url = archivos_subidos[0].get('index_url', '')
                if index_url:
                    mensaje += f"\n\nüè† Ver todos los reportes: {index_url}"
        else:
            mensaje = f"""‚ö†Ô∏è INTENTO DE SUBIDA A GITHUB PAGES

üìÖ Fecha: {timestamp}
‚ùå No se pudieron subir archivos
üîç Verificar configuraci√≥n de GitHub Pages"""
        
        send_message(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, mensaje)
        print("‚úÖ Notificaci√≥n enviada por Telegram")
        return True
        
    except Exception as e:
        print(f"‚ùå Error enviando notificaci√≥n: {e}")
        return False

def main():
    """
    Funci√≥n principal del parche
    """
    print("üîß PARCHE DE GITHUB PAGES")
    print("=" * 30)
    print(f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # Verificar que existe github_pages_uploader
    if not os.path.exists("github_pages_uploader.py"):
        print("‚ùå github_pages_uploader.py no encontrado")
        print("   Aseg√∫rate de que est√° en la ra√≠z del proyecto")
        return False
    
    # Buscar archivos HTML para subir
    archivos_html = verificar_archivos_para_subir()
    
    if not archivos_html:
        print("‚ùå No se encontraron archivos HTML para subir")
        return False
    
    print(f"üìÑ Archivos HTML encontrados: {len(archivos_html)}")
    for archivo in archivos_html:
        mtime = datetime.fromtimestamp(os.path.getmtime(archivo))
        print(f"   ‚Ä¢ {archivo} ({mtime.strftime('%H:%M:%S')})")
    
    # Subir el archivo m√°s reciente
    archivo_mas_reciente = archivos_html[0]
    print(f"\nüåê Subiendo archivo m√°s reciente: {archivo_mas_reciente}")
    
    resultado = subir_a_github_pages(archivo_mas_reciente)
    
    if resultado:
        # Enviar notificaci√≥n por Telegram
        enviar_notificacion_telegram_corregida([resultado])
        
        print(f"\nüéâ ¬°√âXITO!")
        print(f"‚úÖ Archivo subido a GitHub Pages")
        print(f"‚úÖ Notificaci√≥n enviada por Telegram")
        return True
    else:
        print(f"\n‚ùå Error subiendo archivo")
        return False

def subir_todos_los_archivos():
    """
    Sube todos los archivos HTML encontrados
    """
    print("üìÑ SUBIENDO TODOS LOS ARCHIVOS HTML")
    print("=" * 40)
    
    archivos_html = verificar_archivos_para_subir()
    
    if not archivos_html:
        print("‚ùå No hay archivos para subir")
        return
    
    resultados = []
    
    for archivo in archivos_html:
        print(f"\nüåê Subiendo: {archivo}")
        resultado = subir_a_github_pages(archivo)
        if resultado:
            resultados.append(resultado)
        
        # Pausa entre subidas
        import time
        time.sleep(2)
    
    # Enviar notificaci√≥n consolidada
    if resultados:
        enviar_notificacion_telegram_corregida(resultados)
        print(f"\nüéâ Subidos {len(resultados)} archivos exitosamente")
    else:
        print(f"\n‚ùå No se pudo subir ning√∫n archivo")

def verificar_configuracion_github():
    """
    Verifica la configuraci√≥n de GitHub Pages
    """
    print("üîç VERIFICANDO CONFIGURACI√ìN DE GITHUB PAGES")
    print("=" * 50)
    
    try:
        from github_pages_uploader import GitHubPagesUploader
        uploader = GitHubPagesUploader()
        
        print(f"‚úÖ GitHubPagesUploader importado correctamente")
        print(f"üë§ Usuario: {uploader.username}")
        print(f"üìÅ Repositorio: {uploader.repo_name}")
        print(f"üåê URL base: {uploader.base_url}")
        
        # Verificar directorio docs
        if os.path.exists("docs"):
            print(f"‚úÖ Directorio docs/ existe")
            
            # Verificar index.html
            if os.path.exists("docs/index.html"):
                print(f"‚úÖ docs/index.html existe")
            else:
                print(f"‚ùå docs/index.html no existe")
                print(f"   Ejecuta: python github_pages_uploader.py setup")
        else:
            print(f"‚ùå Directorio docs/ no existe")
            print(f"   Ejecuta: python github_pages_uploader.py setup")
        
        # Verificar configuraci√≥n de git
        try:
            import subprocess
            result = subprocess.run(['git', 'status'], capture_output=True, text=True)
            if result.returncode == 0:
                print(f"‚úÖ Repositorio git configurado")
            else:
                print(f"‚ùå No es un repositorio git")
        except FileNotFoundError:
            print(f"‚ö†Ô∏è Git no disponible")
        
        return True
        
    except ImportError:
        print(f"‚ùå No se puede importar GitHubPagesUploader")
        return False
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

if __name__ == "__main__":
    if len(sys.argv) > 1:
        comando = sys.argv[1]
        
        if comando == "--todos":
            subir_todos_los_archivos()
        elif comando == "--verificar":
            verificar_configuracion_github()
        elif comando == "--help":
            print("""
üîß PARCHE DE GITHUB PAGES

Uso: python fix_github_pages_integration.py [opci√≥n]

Opciones:
  (sin opci√≥n)  Subir el archivo HTML m√°s reciente
  --todos       Subir todos los archivos HTML encontrados
  --verificar   Verificar configuraci√≥n de GitHub Pages
  --help        Mostrar esta ayuda

Ejemplos:
  python fix_github_pages_integration.py
  python fix_github_pages_integration.py --todos
  python fix_github_pages_integration.py --verificar
            """)
        else:
            print(f"‚ùå Opci√≥n no reconocida: {comando}")
    else:
        main()
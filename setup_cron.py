#!/usr/bin/env python3
"""
Script para configurar cron job para an√°lisis diario de insider trading
VERSI√ìN MEJORADA CON CORRECCIONES DE ERRORES
"""

import os
import subprocess
from datetime import datetime

def setup_cron_job():
    """
    Configura el cron job para ejecutar el an√°lisis diario CON SCRAPER
    """
    print("üïí Configurando tarea cron para an√°lisis diario MEJORADO...")
    
    # Ruta completa al proyecto
    project_path = "/Users/alejandroordonezvillar/Desktop/stockAnalyzer/stock_analyzer_a"
    python_path = "/usr/bin/python3"
    
    # Crear directorio de logs
    log_dir = os.path.join(project_path, "logs")
    os.makedirs(log_dir, exist_ok=True)
    print(f"‚úÖ Directorio de logs creado: {log_dir}")
    
    # Verificar archivos
    print("üîç Verificando archivos...")
    
    # Scripts principales
    main_script = os.path.join(project_path, "main.py")
    insider_script = os.path.join(project_path, "insiders/insider_tracker.py")
    
    # Buscar scraper
    possible_scrapers = [
        "openinsider_scraper.py",
        "insiders/openinsider_scraper.py", 
        "scraper_independiente.py",
        "scrapers/openinsider_scraper.py"
    ]
    
    scraper_path = None
    for scraper in possible_scrapers:
        full_path = os.path.join(project_path, scraper)
        if os.path.exists(full_path):
            scraper_path = scraper
            print(f"‚úÖ Scraper encontrado: {scraper}")
            break
    
    if not scraper_path:
        print("‚ö†Ô∏è No se encontr√≥ scraper, usando datos existentes")
    
    # Verificar insider_tracker.py
    if os.path.exists(insider_script):
        print("‚úÖ insider_tracker.py encontrado")
    else:
        print("‚ùå insider_tracker.py no encontrado")
        return False
    
    # Crear script de correcci√≥n de errores
    fix_script_content = f"""#!/bin/bash
# Script para corregir errores comunes antes del an√°lisis

cd {project_path}

# Asegurar que docs/index.html existe
if [ ! -f docs/index.html ]; then
    echo "üîß Creando docs/index.html faltante..."
    python3 github_pages_uploader.py setup > /dev/null 2>&1
fi

# Asegurar que reports/ existe
mkdir -p reports

# Copiar CSV a la ubicaci√≥n que busca plot_utils si es necesario
if [ -f reports/insiders_daily.csv ] && [ ! -f insiders_daily.csv ]; then
    cp reports/insiders_daily.csv . 2>/dev/null || true
fi

echo "‚úÖ Pre-correcciones completadas"
"""
    
    fix_script_path = os.path.join(project_path, "fix_before_analysis.sh")
    with open(fix_script_path, 'w') as f:
        f.write(fix_script_content)
    
    # Hacer ejecutable
    os.chmod(fix_script_path, 0o755)
    print(f"‚úÖ Script de correcci√≥n creado: {fix_script_path}")
    
    # Generar l√≠neas de cron
    cron_lines = []
    
    if scraper_path:
        # OPCI√ìN COMPLETA: Scraper + Correcciones + An√°lisis
        scraper_line = f"30 8 * * * cd {project_path} && {python_path} {scraper_path} >> logs/scraper.log 2>&1"
        fix_line = f"55 8 * * * cd {project_path} && ./fix_before_analysis.sh >> logs/fixes.log 2>&1"
        analysis_line = f"0 9 * * * cd {project_path}/insiders && {python_path} insider_tracker.py --completo >> ../logs/analysis.log 2>&1"
        
        cron_lines = [scraper_line, fix_line, analysis_line]
        
        print("‚è∞ HORARIO COMPLETO:")
        print("   8:30 AM - Scraper obtiene datos frescos")
        print("   8:55 AM - Correcciones autom√°ticas")
        print("   9:00 AM - An√°lisis completo + GitHub Pages + Telegram")
        
    else:
        # OPCI√ìN SIN SCRAPER: Solo correcciones + an√°lisis
        fix_line = f"55 8 * * * cd {project_path} && ./fix_before_analysis.sh >> logs/fixes.log 2>&1"
        analysis_line = f"0 9 * * * cd {project_path}/insiders && {python_path} insider_tracker.py --completo >> ../logs/analysis.log 2>&1"
        
        cron_lines = [fix_line, analysis_line]
        
        print("‚è∞ HORARIO SIN SCRAPER:")
        print("   8:55 AM - Correcciones autom√°ticas")
        print("   9:00 AM - An√°lisis completo + GitHub Pages + Telegram")
    
    # Configurar crontab
    try:
        current_crontab = subprocess.check_output(["crontab", "-l"], text=True, stderr=subprocess.DEVNULL)
    except subprocess.CalledProcessError:
        current_crontab = ""
    
    # Limpiar l√≠neas anteriores del proyecto
    lines = current_crontab.split('\n')
    cleaned_lines = [line for line in lines if project_path not in line and line.strip()]
    
    # Crear nuevo crontab
    if cleaned_lines:
        new_crontab = '\n'.join(cleaned_lines) + "\n"
    else:
        new_crontab = ""
    
    # Agregar comentario y l√≠neas nuevas
    new_crontab += f"# Insider Trading Analysis Auto - {datetime.now().strftime('%Y-%m-%d')}\n"
    for line in cron_lines:
        new_crontab += line + "\n"
    
    # Aplicar crontab
    try:
        process = subprocess.Popen(["crontab", "-"], stdin=subprocess.PIPE, text=True)
        process.communicate(new_crontab)
        
        if process.returncode == 0:
            print("‚úÖ Tareas cron configuradas correctamente")
            return True
        else:
            print("‚ùå Error configurando crontab")
            return False
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def verify_and_test():
    """
    Verifica la configuraci√≥n y ofrece prueba
    """
    print("\nüîç Verificando configuraci√≥n...")
    
    try:
        current_crontab = subprocess.check_output(["crontab", "-l"], text=True)
        project_lines = [line for line in current_crontab.split('\n') 
                        if 'stock_analyzer_a' in line and line.strip() and not line.startswith('#')]
        
        if project_lines:
            print("‚úÖ Tareas cron configuradas:")
            for i, line in enumerate(project_lines, 1):
                if 'scraper' in line:
                    print(f"   {i}. üï∑Ô∏è {line}")
                elif 'fix_before' in line:
                    print(f"   {i}. üîß {line}")
                elif 'insider_tracker' in line:
                    print(f"   {i}. üöÄ {line}")
        else:
            print("‚ùå No se encontraron tareas cron")
            
    except subprocess.CalledProcessError:
        print("‚ùå No hay crontab configurado")
    
    # Ofrecer prueba manual
    print("\nüß™ ¬øQUIERES PROBAR AHORA?")
    response = input("Ejecutar an√°lisis completo ahora para verificar? (y/n): ")
    
    if response.lower() == 'y':
        print("üöÄ Ejecutando an√°lisis de prueba...")
        project_path = "/Users/alejandroordonezvillar/Desktop/stockAnalyzer/stock_analyzer_a"
        
        try:
            os.chdir(f"{project_path}/insiders")
            result = subprocess.run(["python3", "insider_tracker.py", "--completo"], 
                                  capture_output=True, text=True, timeout=300)
            
            if result.returncode == 0:
                print("‚úÖ An√°lisis de prueba exitoso!")
                print("üåê Verifica tu sitio web y Telegram")
            else:
                print("‚ö†Ô∏è An√°lisis completado con advertencias")
                print("Salida:", result.stdout[-500:])  # √öltimas 500 chars
                
        except subprocess.TimeoutExpired:
            print("‚è∞ An√°lisis tom√≥ m√°s de 5 minutos, pero probablemente funcion√≥")
        except Exception as e:
            print(f"‚ùå Error en prueba: {e}")

def show_monitoring_commands():
    """
    Muestra comandos √∫tiles para monitoreo
    """
    print("\nüìä COMANDOS √öTILES PARA MONITOREO:")
    print("=" * 50)
    
    project_path = "/Users/alejandroordonezvillar/Desktop/stockAnalyzer/stock_analyzer_a"
    
    print("üîç Ver tareas cron:")
    print("   crontab -l")
    
    print("\nüìÅ Ver logs en tiempo real:")
    print(f"   tail -f {project_path}/logs/analysis.log")
    print(f"   tail -f {project_path}/logs/scraper.log")
    print(f"   tail -f {project_path}/logs/fixes.log")
    
    print("\nüåê URLs importantes:")
    print("   Sitio web: https://tantancansado.github.io/stock_analyzer_a/")
    print("   GitHub Actions: https://github.com/tantancansado/stock_analyzer_a/actions")
    
    print("\nüîß Comandos de emergencia:")
    print("   # Deshabilitar cron temporalmente:")
    print("   crontab -r")
    print("   # Ejecutar an√°lisis manual:")
    print(f"   cd {project_path}/insiders && python3 insider_tracker.py --completo")

def create_monitoring_script():
    """
    Crea un script de monitoreo
    """
    project_path = "/Users/alejandroordonezvillar/Desktop/stockAnalyzer/stock_analyzer_a"
    
    monitor_script = f"""#!/bin/bash
# Script de monitoreo para Insider Trading Analysis

echo "üìä ESTADO DEL SISTEMA INSIDER TRADING"
echo "======================================"
echo "üìÖ $(date)"
echo ""

echo "üïí TAREAS CRON:"
crontab -l | grep stock_analyzer_a || echo "‚ùå No hay tareas cron configuradas"
echo ""

echo "üìÅ LOGS RECIENTES:"
if [ -f {project_path}/logs/analysis.log ]; then
    echo "üöÄ √öltimo an√°lisis:"
    tail -3 {project_path}/logs/analysis.log
else
    echo "‚ùå No hay log de an√°lisis"
fi
echo ""

if [ -f {project_path}/logs/scraper.log ]; then
    echo "üï∑Ô∏è √öltimo scraper:"
    tail -3 {project_path}/logs/scraper.log
else
    echo "‚ùå No hay log de scraper"
fi
echo ""

echo "üåê GITHUB PAGES:"
echo "   Sitio: https://tantancansado.github.io/stock_analyzer_a/"
echo ""

echo "üìä ARCHIVOS RECIENTES:"
ls -lt {project_path}/reports/*.csv 2>/dev/null | head -3 || echo "‚ùå No hay CSVs recientes"
ls -lt {project_path}/docs/*.html 2>/dev/null | head -3 || echo "‚ùå No hay HTMLs recientes"
"""
    
    monitor_path = os.path.join(project_path, "check_status.sh")
    with open(monitor_path, 'w') as f:
        f.write(monitor_script)
    
    os.chmod(monitor_path, 0o755)
    print(f"‚úÖ Script de monitoreo creado: {monitor_path}")
    print(f"   Ejecutar con: {monitor_path}")

if __name__ == "__main__":
    print("üïí CONFIGURADOR AUTOM√ÅTICO INSIDER TRADING v2.0")
    print("=" * 60)
    print("üéØ CARACTER√çSTICAS:")
    print("   ‚úÖ Scraper de datos frescos diarios")
    print("   ‚úÖ Correcci√≥n autom√°tica de errores")
    print("   ‚úÖ An√°lisis completo automatizado")
    print("   ‚úÖ Subida autom√°tica a GitHub Pages")
    print("   ‚úÖ Notificaciones por Telegram")
    print("   ‚úÖ Logs detallados")
    print(f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # Configurar cron
    success = setup_cron_job()
    
    if success:
        # Verificar y ofrecer prueba
        verify_and_test()
        
        # Crear script de monitoreo
        create_monitoring_script()
        
        # Mostrar comandos √∫tiles
        show_monitoring_commands()
        
        print("\nüéâ CONFIGURACI√ìN COMPLETADA!")
        print("üí´ Tu sistema ahora:")
        print("   üîÑ Se ejecuta autom√°ticamente todos los d√≠as")
        print("   üåê Actualiza GitHub Pages autom√°ticamente")
        print("   üì± Env√≠a notificaciones por Telegram")
        print("   üîß Se autocorrige errores comunes")
        print("   üìä Mantiene logs detallados")
        
        print("\nüí° PR√ìXIMOS PASOS:")
        print("   1. El sistema se ejecutar√° ma√±ana a las 9:00 AM")
        print("   2. Verifica los logs despu√©s de la primera ejecuci√≥n")
        print("   3. Tu sitio web se actualizar√° autom√°ticamente")
        
    else:
        print("\n‚ùå Error en la configuraci√≥n")
        print("üí° Verifica permisos y rutas manualmente")